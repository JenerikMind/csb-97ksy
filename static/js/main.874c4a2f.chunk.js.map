{"version":3,"sources":["items/Card.js","UI/GameScreen.js","gamespace/Gameboard.js","utilities/createDeck.js","utilities/scoring.js","gamespace/Gamecontroller.js","App.js","index.js"],"names":["Card","card","suit","name","className","GameScreen","nextCard","checkWinner","playerCardCount","aiCardCount","onClick","Gameboard","playerCards","aiCards","war","overtime","overtimeRounds","player","overtimeArr","i","push","length","createDeck","names","split","suits","deck","rewardWinner","obj","numCards","winningCard","slice","newDeck","console","log","Array","isArray","punishLoser","GameController","firstSet","useState","score","playerDeck","aiDeck","state","setState","secondSet","initializeGame","sort","Math","random","useEffect","playerCard","aiCard","newPlayerDeck","playerVal","aiVal","indexScoreValues","playerIndexScore","indexOf","aiIndexScore","scoring","spoils","newAiDeck","outcome","undefined","App","Gamecontroller","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.874c4a2f.chunk.js","sourcesContent":["function Card({ card: { suit, name } }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <h3>{`${name} of ${suit}`}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","function GameScreen({ nextCard, checkWinner, playerCardCount, aiCardCount }) {\r\n  return (\r\n    <div className=\"gameScreen\">\r\n      <div className=\"player-card-count\">\r\n        <p>Player Cards: {playerCardCount}</p>\r\n        <p>AI Cards: {aiCardCount}</p>\r\n      </div>\r\n      <button onClick={nextCard}>Next Card</button>\r\n      <button onClick={checkWinner}>Score Cards</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameScreen;\r\n","import Card from \"../items/Card\";\r\nimport GameScreen from \"../UI/GameScreen\";\r\n\r\n/**\r\n * The gameboard will contain the two different players\r\n * and handle which cards are thrown out\r\n */\r\nfunction Gameboard({ playerCards, aiCards, checkWinner, war, overtime }) {\r\n  // the JSX element for normal play time (aka when its not WARRRRRRRRRRRR)\r\n  const normalPlay = () => {\r\n    return (\r\n      <>\r\n        <div className=\"playerSpace\">\r\n          <Card player=\"player\" card={playerCards[0]} />\r\n        </div>\r\n        <div className=\"aiSpace\">\r\n          <Card player=\"AI\" card={aiCards[0]} />\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  // deal out the armaments... its WARRRRRRRRRRRRRRRRRRRRR\r\n  const wartime = () => {\r\n    return (\r\n      <>\r\n        <div className=\"playerSpace\">\r\n          <Card player=\"player\" card={playerCards[0]} />\r\n          <Card player=\"player\" card={playerCards[1]} />\r\n          <Card player=\"player\" card={playerCards[2]} />\r\n          {overtimeRounds(\"player\")}\r\n        </div>\r\n        <div className=\"aiSpace\">\r\n          <Card player=\"AI\" card={aiCards[0]} />\r\n          <Card player=\"AI\" card={aiCards[1]} />\r\n          <Card player=\"AI\" card={aiCards[2]} />\r\n          {overtimeRounds(\"ai\")}\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  // we were more evenly matched than I thought... until now! (hopefully)\r\n  const overtimeRounds = (player) => {\r\n    let overtimeArr = [];\r\n    for (let i = 0; i < overtime; i++) {\r\n      let card = null;\r\n      if (player === \"player\") {\r\n        card = <Card player=\"player\" card={playerCards[2 + i]} />;\r\n      } else {\r\n        card = <Card player=\"AI\" card={aiCards[2 + i]} />;\r\n      }\r\n      overtimeArr.push(card);\r\n    }\r\n\r\n    return overtimeArr;\r\n  };\r\n\r\n  return (\r\n    <div className=\"gameboard\">\r\n      <GameScreen\r\n        checkWinner={checkWinner}\r\n        playerCardCount={playerCards.length}\r\n        aiCardCount={aiCards.length}\r\n      />\r\n      {war === false ? normalPlay() : wartime()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Gameboard;\r\n","/**\r\n *  Function creates and returns a standard deck of cards.\r\n */\r\nfunction createDeck() {\r\n  const names = \"A,2,3,4,5,6,7,8,9,10,J,Q,K\".split(\",\");\r\n  const suits = \"Hearts,Diamonds,Spades,Clubs\".split(\",\");\r\n\r\n  const deck = [];\r\n\r\n  for (let suit of suits) {\r\n    for (let name of names) {\r\n      deck.push({\r\n        name: name,\r\n        suit: suit\r\n      });\r\n    }\r\n  }\r\n\r\n  return deck;\r\n}\r\n\r\nexport default createDeck;\r\n","/**\r\n *  Function takes 2 variables, the player current card value\r\n *  and the ai current card value.  It checks the index of the value\r\n *  and will return \"win\" if the card is of a higher value,\r\n *  \"lose\" if it's of a lower value, and \"draw\" if it's the same.\r\n */\r\nfunction scoring(playerVal, aiVal) {\r\n  const indexScoreValues = \"A,2,3,4,5,6,7,8,9,10,J,Q,K\".split(\",\");\r\n  const playerIndexScore = indexScoreValues.indexOf(playerVal);\r\n  const aiIndexScore = indexScoreValues.indexOf(aiVal);\r\n\r\n  if (playerIndexScore > aiIndexScore) {\r\n    return \"win\";\r\n  } else if (playerIndexScore < aiIndexScore) {\r\n    return \"lose\";\r\n  } else {\r\n    return \"draw\";\r\n  }\r\n}\r\n\r\n/**\r\n *  Takes the top card in the deck and pushes it to the end\r\n *  of the deck.  Optional obj param to take from the losing\r\n *  deck.\r\n * @param {*} deck The winners deck\r\n * @param {*} obj The losing card\r\n */\r\nfunction rewardWinner(deck = [], obj = null, numCards) {\r\n  const winningCard = numCards ? deck.slice(0, numCards) : deck[0];\r\n  let newDeck = numCards ? deck.slice(numCards) : deck.slice(1);\r\n\r\n  winningCard.length > 1\r\n    ? newDeck.push(...winningCard)\r\n    : newDeck.push(winningCard);\r\n\r\n  console.log(`obj `, obj);\r\n  console.log(`isArray()`, Array.isArray(obj));\r\n\r\n  if (Array.isArray(obj)) {\r\n    newDeck.push(...obj);\r\n  } else if (obj) {\r\n    newDeck.push(obj);\r\n  }\r\n\r\n  return newDeck;\r\n}\r\n\r\n/**\r\n *  Removes the top card from the loser's deck\r\n * @param {*} deck Losing deck\r\n */\r\nfunction punishLoser(deck = [], numCards = 1) {\r\n  return deck.slice(numCards);\r\n}\r\n\r\n/**\r\n *  The backbone of the logic in the game.\r\n *\r\n *  Function that determines how the cards are divvied up\r\n *  amongst the \"players\".  Default is that the winning player\r\n *  takes both the loser's card and the winning card.  WAR determines\r\n *  whether the winning player will take more than a single\r\n *  card.\r\n * @param {*} playerDeck\r\n * @param {*} aiDeck\r\n * @param {*} war state triggered on first \"draw\"\r\n * @param {*} overtime # of overtime rounds if consecutive \"draw\"s\r\n */\r\nfunction outcome(playerDeck, aiDeck, war, overtime) {\r\n  const playerCard = war ? playerDeck[2 + overtime] : playerDeck[0];\r\n  const aiCard = war ? aiDeck[2 + overtime] : aiDeck[0];\r\n\r\n  console.log(`Player: ${playerCard.name} // AI: ${aiCard.name}`);\r\n\r\n  let score = scoring(playerCard.name, aiCard.name);\r\n  let spoils = 3 + overtime; // the spoils of war\r\n  let newPlayerDeck,\r\n    newAiDeck = [];\r\n\r\n  if (score === \"win\") {\r\n    if (war) {\r\n      console.log(`rewarding the winner of war...`);\r\n      newPlayerDeck = rewardWinner(playerDeck, aiDeck.slice(0, spoils), spoils);\r\n      newAiDeck = punishLoser(aiDeck, spoils);\r\n    } else {\r\n      newPlayerDeck = rewardWinner(playerDeck, aiCard);\r\n      newAiDeck = punishLoser(aiDeck);\r\n    }\r\n  } else if (score === \"lose\") {\r\n    if (war) {\r\n      console.log(`rewarding the winner of war...`);\r\n      newAiDeck = rewardWinner(aiDeck, playerDeck.slice(0, spoils), spoils);\r\n      newPlayerDeck = punishLoser(playerDeck, spoils);\r\n    } else {\r\n      newAiDeck = rewardWinner(aiDeck, playerCard);\r\n      newPlayerDeck = punishLoser(playerDeck);\r\n    }\r\n  } else {\r\n    // WARRRRRR\r\n    if (war) {\r\n      return { war: war, overtime: overtime + 1 };\r\n    } else {\r\n      return { war: !war };\r\n    }\r\n  }\r\n\r\n  return {\r\n    playerDeck: newPlayerDeck,\r\n    aiDeck: newAiDeck,\r\n    war: false,\r\n    overtime: 0\r\n  };\r\n}\r\n\r\nexport { scoring, rewardWinner, punishLoser, outcome };\r\n","import Gameboard from \"./Gameboard\";\r\nimport createDeck from \"../utilities/createDeck\";\r\nimport { outcome } from \"../utilities/scoring\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n/**\r\n * The gamecontroller that will have control over both the player side\r\n * and the AI side.  It will keep track of the score, and will create\r\n * and send the current card to the player components.\r\n */\r\nfunction GameController() {\r\n  // create the deck\r\n  let deck = createDeck();\r\n\r\n  // initialize a master state that keeps track of the game\r\n  const initState = {\r\n    score: 0,\r\n    playerDeck: [\"loading\"],\r\n    aiDeck: [\"loading\"],\r\n    war: false,\r\n    overtime: 0\r\n  };\r\n\r\n  const [state, setState] = useState(initState);\r\n  let firstSet,\r\n    secondSet = [];\r\n\r\n  // a simple shuffle arrow func\r\n  const shuffle = (arr) => {\r\n    arr.sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  /////////// GAME CONTROL ////////////////////\r\n  function checkWinner() {\r\n    const { playerDeck, aiDeck, war, overtime } = outcome(\r\n      state.playerDeck,\r\n      state.aiDeck,\r\n      state.war,\r\n      state.overtime\r\n    );\r\n\r\n    if (playerDeck === undefined) {\r\n      if (war) setState({ ...state, war: war });\r\n      if (overtime) setState({ ...state, overtime: overtime });\r\n      return 0;\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      playerDeck: playerDeck,\r\n      aiDeck: aiDeck,\r\n      war: war,\r\n      overtime: overtime\r\n    });\r\n  }\r\n  //////////////////////////////////////////////\r\n\r\n  /////////// GAME INITIALIZATION //////////////\r\n  // initialize the game and assign each player a set of cards\r\n  function initializeGame() {\r\n    // shuffle the deck then split the deck in half\r\n    shuffle(deck);\r\n\r\n    // assign the cards\r\n    firstSet = deck.slice(0, 26);\r\n    secondSet = deck.slice(26);\r\n\r\n    // update the state\r\n    setState({ ...state, playerDeck: firstSet, aiDeck: secondSet });\r\n  }\r\n\r\n  // use a hook to initialize the game\r\n  // and prevent the rerender loop error\r\n  useEffect(() => {\r\n    initializeGame();\r\n  }, []);\r\n\r\n  /////////////////////////////////////////////////\r\n\r\n  return (\r\n    <div className=\"gamespace\">\r\n      <Gameboard\r\n        war={state.war}\r\n        playerCards={state.playerDeck}\r\n        aiCards={state.aiDeck}\r\n        checkWinner={checkWinner}\r\n        overtime={state.overtime}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameController;\r\n","import Gamecontroller from \"./gamespace/Gamecontroller\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Gamecontroller />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}